# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178
stages:
  - build
  - test
  - publish
  - deploy

variables:
  # DJANGO_CONFIG: "test"
  DOCKER_DRIVER: overlay2
  MYSQL_DATABASE: "db_name"
  MYSQL_ROOT_PASSWORD: "dbpass"
  MYSQL_USER: "username"
  MYSQL_PASSWORD: "dbpass"
  MYSQL_HOST: mysql

  # Deployment tags
  TAG_LATEST: ghcr.io/albinoboi/sop-docker:latest
  TAG_COMMIT: ghcr.io/albinoboi/sop-docker:$CI_COMMIT_SHORT_SHA

  # Fix tls issue in docker
  DOCKER_TLS_CERTDIR: ""

default:
  image: python:3.9

  cache:
    key: build-cache
    paths:
      - .cache/pip/

  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  before_script:
    - "[ ! -d 'venv3.9' ] && python3 -m venv venv3.9"
    - "[ ! -d 'public' ] && mkdir public"
    - source venv3.9/bin/activate
    - python3.9 -m pip install --upgrade pip
    - python3.9 -m pip install -r requirements.txt
    - python3.9 -m pip install coverage
    - python3.9 -m pip install backend_library/src
    - python3.9 -V

.frontend-base:
  image: python:3.9-slim-bullseye
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - mysql:8.0
  before_script:
    - apt-get -y update
    - apt-get -yq install software-properties-common
    - apt-get -y install apt-utils net-tools wget default-mysql-client default-libmysqlclient-dev python3-distutils python3-dev gcc memcached
    - "[ ! -d 'venv3.9' ] && python3 -m venv venv3.9"
    - "[ ! -d 'public' ] && mkdir public"
    - source venv3.9/bin/activate
    - python3.9 -m pip install --upgrade pip
    - python3.9 -m pip install -r requirements.txt
    - python3.9 -m pip install mysqlclient coverage
    - python3.9 -m pip install -e backend_library/src
    - python3.9 -V

flake:
  stage: test
  needs: []
  before_script:
    - python3.9 -m pip install flake8 flake8-assertive
  script:
    - flake8 --color always .
    - echo looking for forbidden windows line endings...
    - '! grep -IUrPl --exclude-dir=.git --exclude-dir=venv* "\r$" 1>&2'

django-tests:
  needs: []
  stage: test
  extends: .frontend-base
  coverage: '/^TOTAL.+?(\d+.\d+\%)$/'
  script:
    - source venv3.9/bin/activate

    # We skip pyodtodb django admin command tests because it needs way to big python dependencies
    # - pip3 install -r requirements_pyod_algorithms.txt

    - which python3.9
    - cd webserver/src/main/sop

    # make migrations and migrate, so the db is ready for the tests
    - python3.9 manage.py makemigrations --settings=sop.settings_ci
    - python3.9 manage.py migrate --settings=sop.settings_ci
    - python3.9 manage.py showmigrations --settings=sop.settings_ci
    - python3.9 manage.py check --settings=sop.settings_ci

    - pip3 install django_coverage_plugin
    - "echo '[run]\nplugins = django_coverage_plugin' > .coveragerc"
    - memcached -d -u root
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    - python3.9 manage.py showmigrations --settings=sop.settings_ci
    - python3.9 -m coverage run --rcfile=.coveragerc --source="." --omit="media/*","*/migrations/*","*/__init__.py","tests/*","sop/*","*/pyodtodb.py","manage.py","*/templates/admin/*" manage.py test --settings sop.settings_ci
    - python3.9 -m coverage report --rcfile=.coveragerc --precision=2
    - 'wget -O ../../../../public/django-tests.svg https://img.shields.io/badge/webserver\ coverage-$(python3.9 -m coverage report --rcfile=.coveragerc --precision=2 | grep -E "^TOTAL.+?([0-9]+.[0-9]+%)$" | grep -Eo "[0-9]+.[0-9]+%$")-informational'
  artifacts:
    paths:
      - public/django-tests.svg

backend-tests:
  variables:
    IS_EXECUTING_IN_CI: "1"
  needs: [ ]
  stage: test
  coverage: '/^TOTAL.+?(\d+.\d+\%)$/'
  image: python:3.9-slim-bullseye
  script:
    - which python3.9
    - 'echo "import coverage" >> venv3.9/lib/python3.9/site-packages/sitecustomize.py'
    - 'echo "coverage.process_startup()" >> venv3.9/lib/python3.9/site-packages/sitecustomize.py'
    - cd backend_library/src
    - apt-get update
    - apt-get -y install zip wget
    - python3.9 -m coverage --version
    - export COVERAGE_PROCESS_START=$PWD/../MultiPTesting.ini
    - export COVERAGE_RCFILE=$PWD/../MultiPTesting.ini
    - python3.9 -m coverage run
    - python3.9 -m coverage combine
    - python3.9 -m coverage report
    - 'wget -O ../../public/backend-tests.svg https://img.shields.io/badge/backend\ coverage-$(python3.9 -m coverage report | grep -E "^TOTAL.+?([0-9]+.[0-9]+%)$" | grep -Eo "[0-9]+.[0-9]+%$")-informational'
    - python3.9 -m coverage html
    - zip -r ../../public/backend-cov.zip ./htmlcov
  artifacts:
    paths:
      - public/backend-tests.svg
      - public/backend-cov.zip


backend-docs:
  image: python:3.9-slim-bullseye
  allow_failure: true
  only:
    - main
  stage: build
  script:
    - pip install pdoc
    - apt-get update
    - apt-get -y install zip
    - which python3.9
    - cd backend_library/src
    - python3.9 -m pdoc ./backend -o docs
    - mkdir -p ../../public/
    - zip -r ../../public/backend-docs.zip ./docs
  artifacts:
    paths:
      - public/backend-docs.zip

deploy-docs:
  inherit:
    default: false
  needs: 
    - backend-docs
  image: debian:latest
  stage: deploy
  only:
    - main
  before_script:
    - apt -y update
    - apt -y install openssh-client
  script:
    - chmod og= $ID_RSA
    - echo "Pulling docs..."
    - >-
      ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "curl --location --output ~/sop-docs/backend-docs.zip --header 'JOB-TOKEN: $CI_JOB_TOKEN' 'https://git.scc.kit.edu/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/main/raw/public/backend-docs.zip?job=backend-docs'"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "./deploy-docs.sh"


publish-build:
  inherit:
    default: false
  needs:
    - backend-tests
    - django-tests
  stage: publish
  only:
    - main
  image: docker:stable
  script:
    - docker login ghcr.io -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN
    - docker pull $TAG_LATEST
    - docker build -t $TAG_COMMIT -t $TAG_LATEST --cache-from $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
    - docker image rm -f $TAG_COMMIT


deploy-badges:
  needs: 
    - backend-tests
    - django-tests
  inherit:
    default: false
  stage: deploy
  only:
    - main
  artifacts:
    paths:
      - public
  script:
    - ''

deploy-app:
  needs:
    - publish-build
  inherit:
    default: false
  stage: deploy
  only:
    - main
  image: debian:latest
  tags:
    - deployment
  before_script:
    - apt-get -y update
    - apt-get -y install openssh-client

  script:
    - chmod og= $ID_RSA
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "./redeploy.sh"
  environment:
    name: development
    url: https://sop.ffhz.site
