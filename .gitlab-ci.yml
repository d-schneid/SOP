# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178
stages:
  - build
  - test
  - confidence-test
  - publish
  - deploy

variables:
  # DJANGO_CONFIG: "test"
  DOCKER_DRIVER: overlay2
  MYSQL_DATABASE: "db_name"
  MYSQL_ROOT_PASSWORD: "dbpass"
  MYSQL_USER: "username"
  MYSQL_PASSWORD: "dbpass"
  MYSQL_HOST: mysql

  # Deployment tags
  TAG_LATEST: ghcr.io/albinoboi/sop-docker:latest
  TAG_COMMIT: ghcr.io/albinoboi/sop-docker:$CI_COMMIT_SHORT_SHA

  # Fix tls issue in docker
  DOCKER_TLS_CERTDIR: ""

default:
  image: python:3.9

  cache:
    key: build-cache
    paths:
      - .cache/pip/

  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  before_script:
    - "[ ! -d 'venv3.9' ] && python3 -m venv venv3.9"
    - "[ ! -d 'public' ] && mkdir public"
    - source venv3.9/bin/activate
    - python3.9 -m pip install --upgrade pip
    - python3.9 -m pip install -r requirements.txt
    - python3.9 -m pip install coverage
    - python3.9 -m pip install backend_library/src
    - python3.9 -V

.frontend-base:
  image: python:3.9-bullseye
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - mysql:8.0
  before_script:
    - apt-get -y update
    - apt-get -yq install software-properties-common
    - apt-get -y install apt-utils net-tools wget default-mysql-client default-libmysqlclient-dev python3-distutils python3-dev gcc memcached
    - "[ ! -d 'venv3.9' ] && python3 -m venv venv3.9"
    - "[ ! -d 'public' ] && mkdir public"
    - source venv3.9/bin/activate
    - python3.9 -m pip install --upgrade pip
    - python3.9 -m pip install -r requirements.txt
    - python3.9 -m pip install mysqlclient coverage
    - python3.9 -m pip install -e backend_library/src
    - python3.9 -V

debug-firefox-tests:
  needs: []
  stage: test
  extends: .frontend-base
  coverage: '/^TOTAL.+?(\d+.\d+\%)$/'
  script:
    - source venv3.9/bin/activate

    # Selenium Test requirements
    - python3.9 -m pip install -r requirements_test.txt
    # (we need PyOd requirements due to Selenium tests)
    - python3.9 -m pip install -r requirements_pyod_algorithms.txt

    # Chrome-Browser Installation
    - wget --quiet -O chrome_browser.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt-get install --quiet --assume-yes ./chrome_browser.deb
    - rm chrome_browser.deb

    # install Firefox Browser
    #- apt-get install --quiet --assume-yes firefox-esr
    # do not install manually, try per package (see above)
    # install dependencies
    - apt-get install --quiet --assume-yes glibc-source libdbus-glib-1-2
    # get Firefox itself
    - wget --quiet -O firefox_browser.tar.bz2 "https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64&lang=en-GB"
    - tar xjf firefox_browser.tar.bz2
    - mv firefox /opt
    - ln -s /opt/firefox/firefox /usr/local/bin/firefox
    - rm firefox_browser.tar.bz2
    #- chmod 755 /opt/firefox
    #- chmod 755 /opt/firefox/firefox

    - which python3.9
    - cd webserver/src/main/sop

    # make migrations and migrate, so the db is ready for the tests
    #- python3.9 manage.py makemigrations --settings=sop.settings_ci
    #- python3.9 manage.py migrate --settings=sop.settings_ci
    #- python3.9 manage.py showmigrations --settings=sop.settings_ci
    #- python3.9 manage.py check --settings=sop.settings_ci

    #- pip3 install django_coverage_plugin
    #- "echo '[run]\nplugins = django_coverage_plugin' > .coveragerc"
    - memcached -d -u root
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    - python3.9 manage.py showmigrations --settings=sop.settings_ci
    #- python3.9 -m coverage run --rcfile=.coveragerc --source="." --omit="media/*","*/migrations/*","*/__init__.py","tests/*","sop/*","*/pyodtodb.py" manage.py test --settings sop.settings_ci
    #- python3.9 -m coverage report --rcfile=.coveragerc --precision=2
    #- 'wget -O ../../../../public/django-tests.svg https://img.shields.io/badge/webserver\ coverage-$(python3.9 -m coverage report --rcfile=.coveragerc --precision=2 | grep -E "^TOTAL.+?([0-9]+.[0-9]+%)$" | grep -Eo "[0-9]+.[0-9]+%$")-informational'

    # run Selenium Tests with Firefox
    - python3.9 manage.py test --settings=sop.settings_ci tests/systemtests/

    # run Selenium Tests with Chrome
    #- echo "chrome" > selenium_browser.conf  # settings file for the unittest (so that they are run with Chrome)
    #- python3.9 manage.py test --settings=sop.settings_ci tests/systemtests/
  artifacts:
    paths:
      - public/django-tests.svg
      - webserver/src/main/sop/tests/systemtests/media/




debug-chrome-tests:
  needs: []
  stage: test
  extends: .frontend-base
  coverage: '/^TOTAL.+?(\d+.\d+\%)$/'
  script:
    - source venv3.9/bin/activate

    # Selenium Test requirements
    - python3.9 -m pip install -r requirements_test.txt
    # (we need PyOd requirements due to Selenium tests)
    - python3.9 -m pip install -r requirements_pyod_algorithms.txt

    # Chrome-Browser Installation
    - wget --quiet -O chrome_browser.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt-get install --quiet --assume-yes ./chrome_browser.deb
    - rm chrome_browser.deb

    # install Firefox Browser
    #- apt-get install --quiet --assume-yes firefox-esr
    # do not install manually, try per package (see above)
    # install dependencies
    - apt-get install --quiet --assume-yes glibc-source libdbus-glib-1-2
    # get Firefox itself
    - wget --quiet -O firefox_browser.tar.bz2 "https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64&lang=en-GB"
    - tar xjf firefox_browser.tar.bz2
    - mv firefox /opt
    - ln -s /opt/firefox/firefox /usr/local/bin/firefox
    - rm firefox_browser.tar.bz2
    #- chmod 755 /opt/firefox
    #- chmod 755 /opt/firefox/firefox

    - which python3.9
    - cd webserver/src/main/sop

    # make migrations and migrate, so the db is ready for the tests
    #- python3.9 manage.py makemigrations --settings=sop.settings_ci
    #- python3.9 manage.py migrate --settings=sop.settings_ci
    #- python3.9 manage.py showmigrations --settings=sop.settings_ci
    #- python3.9 manage.py check --settings=sop.settings_ci

    #- pip3 install django_coverage_plugin
    #- "echo '[run]\nplugins = django_coverage_plugin' > .coveragerc"
    - memcached -d -u root
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    - python3.9 manage.py showmigrations --settings=sop.settings_ci
    #- python3.9 -m coverage run --rcfile=.coveragerc --source="." --omit="media/*","*/migrations/*","*/__init__.py","tests/*","sop/*","*/pyodtodb.py" manage.py test --settings sop.settings_ci
    #- python3.9 -m coverage report --rcfile=.coveragerc --precision=2
    #- 'wget -O ../../../../public/django-tests.svg https://img.shields.io/badge/webserver\ coverage-$(python3.9 -m coverage report --rcfile=.coveragerc --precision=2 | grep -E "^TOTAL.+?([0-9]+.[0-9]+%)$" | grep -Eo "[0-9]+.[0-9]+%$")-informational'

    # run Selenium Tests with Firefox
    #- python3.9 manage.py test --settings=sop.settings_ci tests/systemtests/

    # run Selenium Tests with Chrome
    - echo "chrome" > selenium_browser.conf  # settings file for the unittest (so that they are run with Chrome)
    - python3.9 manage.py test --settings=sop.settings_ci tests/systemtests/
  artifacts:
    paths:
      - public/django-tests.svg
      - webserver/src/main/sop/tests/systemtests/media/




