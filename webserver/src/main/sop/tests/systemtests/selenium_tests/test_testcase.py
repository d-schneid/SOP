# Generated by Selenium IDE
from django.conf import settings
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

from authentication.models import User
from experiments.models import Dataset, Algorithm, Experiment, Execution
from experiments.models.execution import ExecutionStatus
from tests.generic import MediaMixin, DebugSchedulerMixin


class TestTestcase1(DebugSchedulerMixin, MediaMixin, StaticLiveServerTestCase):
    def setUp(self):
        self.vars = {
            "dataset_name": "test dataset",
            "dataset_description": "This is a test description",
            "algorithm_name": "Algorithm Test",
            "experiment_name": "Cool Experiment",
            "algorithm_description": "Sample description for algorithm",
            "min_sub": 6,
            "max_sub": 6,
            "sub_amount": 1,
            "seed": 42,
        }

        self.credentials = {"username": "user", "password": "passwd"}
        self.user = User.objects.create_user(**self.credentials)
        self.driver = webdriver.Chrome()
        super().setUp()

    def tearDown(self):
        self.driver.quit()
        super().tearDown()

    def test_testcase1(self):
        self.driver.get(self.live_server_url)
        self.driver.set_window_size(1920, 1024)

        # Login
        WebDriverWait(self.driver, 30).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Login"))
        ).click()
        self.driver.find_element(By.ID, "id_username").send_keys(
            self.credentials["username"]
        )
        self.driver.find_element(By.ID, "id_password").send_keys(
            self.credentials["password"]
        )
        self.driver.find_element(By.ID, "id_username").send_keys(Keys.ENTER)

        # Dataset Upload
        WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Datasets"))
        ).click()
        WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Upload dataset"))
        ).click()

        self.driver.find_element(By.ID, "id_display_name").click()
        self.driver.find_element(By.ID, "id_display_name").send_keys(
            self.vars["dataset_name"]
        )

        filepath = str(
            settings.BASE_DIR / "tests" / "sample_datasets" / "canada_short.csv"
        )
        self.driver.find_element(By.ID, "id_path_original").send_keys(filepath)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-success").click()

        WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Download Cleaned"))
        )

        # Dataset Edit Description
        self.driver.find_element(By.CSS_SELECTOR, ".card-body").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".card-body")
        actions = ActionChains(self.driver)
        actions.double_click(element).perform()
        self.driver.find_element(By.LINK_TEXT, "Edit").click()
        self.driver.find_element(By.ID, "id_description").click()
        self.driver.find_element(By.ID, "id_description").send_keys(
            self.vars["dataset_description"]
        )
        self.driver.find_element(By.CSS_SELECTOR, ".btn-warning").click()

        # Algorithm Upload
        self.driver.find_element(By.LINK_TEXT, "Algorithms").click()
        self.driver.find_element(By.LINK_TEXT, "Upload algorithm").click()
        self.driver.find_element(By.ID, "id_display_name").click()
        self.driver.find_element(By.ID, "id_display_name").send_keys(
            self.vars["algorithm_name"]
        )
        dropdown = self.driver.find_element(By.ID, "id_group")
        dropdown.find_element(By.XPATH, "//option[. = 'Other']").click()
        element = self.driver.find_element(By.ID, "id_group")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_group")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_group")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()

        filepath = str(
            settings.BASE_DIR
            / "tests"
            / "sample_algorithms"
            / "SampleAlgorithmWorking.py"
        )
        self.driver.find_element(By.ID, "id_path").send_keys(filepath)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-success").click()

        # Algorithm Edit
        self.driver.find_element(By.CSS_SELECTOR, ".card-body").click()
        element = self.driver.find_element(By.CSS_SELECTOR, ".card-body")
        actions = ActionChains(self.driver)
        actions.double_click(element).perform()
        self.driver.find_element(By.LINK_TEXT, "Edit").click()
        self.driver.find_element(By.ID, "id_description").click()
        self.driver.find_element(By.ID, "id_description").send_keys(
            self.vars["algorithm_description"]
        )
        self.driver.find_element(By.CSS_SELECTOR, ".btn-warning").click()

        # Experiment Creation
        self.driver.find_element(By.LINK_TEXT, "Experiments").click()
        self.driver.find_element(By.LINK_TEXT, "Create experiment").click()
        self.driver.find_element(By.ID, "id_display_name").click()
        self.driver.find_element(By.ID, "id_display_name").send_keys(
            self.vars["experiment_name"]
        )
        dropdown = self.driver.find_element(By.ID, "id_dataset")
        WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable(
                (By.XPATH, "//option[. = 'test dataset | user']")
            )
        ).click()
        self.driver.find_element(By.CSS_SELECTOR, "#group_Other > .flex-grow-1").click()

        WebDriverWait(self.driver, 30).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#collapse_Other .ml-2"))
        ).click()
        self.driver.find_element(By.CSS_SELECTOR, ".btn-success").click()

        # Execution Creation
        self.driver.find_element(By.LINK_TEXT, "New Execution").click()
        self.driver.find_element(By.ID, "id_subspaces_min").click()
        self.driver.find_element(By.ID, "id_subspaces_min").send_keys(self.vars["min_sub"])
        self.driver.find_element(By.ID, "id_subspaces_max").send_keys(self.vars["max_sub"])
        self.driver.find_element(By.ID, "id_subspace_amount").send_keys(self.vars["sub_amount"])
        self.driver.find_element(By.ID, "id_subspace_generation_seed").click()
        self.driver.find_element(By.ID, "id_subspace_generation_seed").send_keys(self.vars["seed"])
        self.driver.find_element(By.CSS_SELECTOR, ".btn-success").click()
        self.driver.find_element(By.LINK_TEXT, "Datasets").click()

        # Wait for finish
        WebDriverWait(self.driver, 30).until(
            EC.element_to_be_clickable((By.LINK_TEXT, "Download Cleaned"))
        )

        self.check_for_valid_state()

    def check_for_valid_state(self):
        dataset = Dataset.objects.first()
        self.assertIsNotNone(dataset)
        self.assertEqual(dataset.display_name, self.vars["dataset_name"])
        self.assertEqual(dataset.description, self.vars["dataset_description"])
        self.assertTrue(dataset.is_cleaned)
        self.assertTrue(dataset.has_finished)
        self.assertFalse(dataset.has_error)
        self.assertEqual(dataset.user, self.user)

        algorithm = Algorithm.objects.first()
        self.assertIsNotNone(algorithm)
        self.assertEqual(algorithm.display_name, self.vars["algorithm_name"])
        self.assertEqual(algorithm.description, self.vars["algorithm_description"])
        self.assertEqual(algorithm.user, self.user)

        experiment = Experiment.objects.first()
        self.assertIsNotNone(experiment)
        self.assertEqual(experiment.display_name, self.vars["experiment_name"])
        self.assertEqual(experiment.dataset, dataset)
        self.assertListEqual(list(experiment.algorithms.all()), [algorithm])
        self.assertEqual(experiment.user, self.user)

        execution = Execution.objects.first()
        self.assertIsNotNone(execution)
        self.assertEqual(execution.experiment, experiment)
        self.assertEqual(execution.progress, 1.00)
        self.assertEqual(execution.status, ExecutionStatus.FINISHED.name)
        self.assertTrue(execution.has_result)
        self.assertFalse(execution.is_running)
        self.assertFalse(execution.is_crashed)
        self.assertEqual(execution.subspaces_min, self.vars["min_sub"])
        self.assertEqual(execution.subspaces_max, self.vars["max_sub"])
        self.assertEqual(execution.subspace_amount, self.vars["sub_amount"])
        self.assertEqual(execution.subspace_generation_seed, self.vars["seed"])
